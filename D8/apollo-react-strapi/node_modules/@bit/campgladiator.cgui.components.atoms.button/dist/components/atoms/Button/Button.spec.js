"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _sinon = _interopRequireDefault(require("sinon"));

var _Button = _interopRequireDefault(require("./Button"));

var _Loader = _interopRequireDefault(require("../Loader/Loader"));

var _breakpoints = _interopRequireDefault(require("../../../utilities/breakpoints"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('<Button />', function () {
  it('renders without crashing', function () {
    expect(function () {
      return (0, _enzyme.shallow)(_react.default.createElement(_Button.default, null));
    }).not.toThrow();
  });
  it('accepts any extra classes', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_Button.default, {
      className: "my-button"
    })).hasClass('my-button')).toBe(true);
  });
  it('renders button with modifier class', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_Button.default, {
      solid: true
    })).hasClass('cg-button--solid')).toBe(true);
  });
  it('should add `disabled` attribute to the element', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_Button.default, {
      disabled: true
    })).find('.cg-button[disabled]')).toBeTruthy();
  });
  it('should add size as a modifier class', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_Button.default, {
      size: "xsmall"
    })).hasClass('cg-button--xsmall')).toBe(true);
  });
  it('should add size class for the given breakpoint', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_Button.default, {
      media: _defineProperty({}, _breakpoints.default.phoneOnly, 'xsmall')
    })).hasClass('cg-button--xsmall@phone-only')).toBe(true);
  });
  it('renders a loader when in loading state', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_Button.default, {
      loading: true
    })).contains(_react.default.createElement(_Loader.default, {
      white: false
    }))).toBe(true);
  });
  it('renders a white loader the button is solid and loading', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_Button.default, {
      solid: true,
      loading: true
    })).contains(_react.default.createElement(_Loader.default, {
      white: true
    }))).toBe(true);
  });
  it('calls `onClick` handler', function () {
    var handler = _sinon.default.spy();

    (0, _enzyme.shallow)(_react.default.createElement(_Button.default, {
      onClick: handler
    })).find('button').simulate('click');
    expect(handler).toHaveProperty('callCount', 1);
  });
});

//# sourceMappingURL=Button.spec.js.map